{
  "name": "grunt-retro",
  "description": "Add grunt@0.4 functionality to grunt@0.3 plugins",
  "version": "0.6.0",
  "homepage": "https://github.com/twolfson/grunt-retro",
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com",
    "url": "http://twolfson.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/twolfson/grunt-retro.git"
  },
  "bugs": {
    "url": "https://github.com/twolfson/grunt-retro/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/twolfson/grunt-retro/blob/master/LICENSE-MIT"
    }
  ],
  "main": "tasks/retro.js",
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "cd test && grunt"
  },
  "_devDependencies": {
    "grunt": "~0.3.17"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "retrofit",
    "grunt@0.3",
    "legacy"
  ],
  "readme": "# grunt-retro\n\nAdd grunt@0.4 functionality to grunt@0.3 plugins\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-retro`\n\nThen inside your grunt plugin or grunt.js (depending on the scope of your intent), load and bind `grunt-retro` to `grunt`:\n\n```javascript\n// Inside of grunt plugin (MUST BE DONE IMMEDIATELY AFTER module.exports)\nmodule.exports = function (grunt) {\n  grunt = require('grunt-retro')(grunt);\n  \n  // Continue with normal actions\n};\n```\n\n[grunt]: http://gruntjs.com/\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n`grunt-retro` takes care of the gotchas between `grunt@0.3` and `grunt@0.4`. Below is a list of what we guarantee to work:\n\n- Define `this.file` to match the `0.3` specification; `{src, file}`\n- Fallback `this.utils` to be an object of `grunt` utilites\n- Allow for `registerTask` to alias multiple tasks via single string\n\n```js\ngrunt.registerTask('multi-task', 'lint clean test');\n```\n\n- Add back `grunt.helper` and `grunt.registerHelper` system\n\n### Nuances\n- Plugins will receive the same `array` or `non-array` input from `this.file.src`\n    - In `0.4`, this is normalized to always be an `array`.\n- Fallback `grunt.file.glob.minimatch`\n\n## Examples\n### grunt plugin\n\n```js\nmodule.exports = function (grunt) {\n  // Bind retro functionality\n  grunt = require('grunt-retro')(grunt);\n  \n  // Create and register our task\n  grunt.registerTask('rot13', 'Rotate a file by 13', function () {\n    // Grab file locations -- normally, we would expandFiles(src)\n    var file = this.file,\n        src = file.src,\n        dest = file.dest;\n        \n    // Rotate content\n    var input = grunt.file.read(src),\n        output = grunt.helper('rot13', input);\n        \n    // Write out content\n    grunt.file.write(dest, output);\n  });\n  \n  // Register a helper for performing rot13\n  grunt.registerHelper('rot13', rot13Fn);\n};\n```\n\n### grunt.js\n```js\nmodule.exports = function (grunt) {\n  // Bind retro functionality\n  grunt = require('grunt-retro')(grunt);\n  \n  // Set up config\n  grunt.initConfig({...});\n  \n  // Register default task\n  grunt.registerTask('default', 'lint test');\n};\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint your code using [grunt][grunt] and test via `npm test`.\n\n## License\nCopyright (c) 2013 Todd Wolfson\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-retro@0.6.0",
  "dist": {
    "shasum": "c6dc9e22ed3cf63460544d50a9d783e8a05ca50d"
  },
  "_from": "grunt-retro@~0.6.0",
  "_resolved": "https://registry.npmjs.org/grunt-retro/-/grunt-retro-0.6.0.tgz"
}
